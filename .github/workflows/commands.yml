name: Commands on PR
on:
  issue_comment:
    types: [created]
  schedule:
    # once a day at 13:00 UTC
    - cron: '0 13 * * *'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  cleanup_old_runs:
    if: github.event.schedule == '0 13 * * *'
    runs-on: ubuntu-20.04
    permissions:
      actions: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Delete old workflow runs
      run: |
        _UrlPath="/repos/$GITHUB_REPOSITORY/actions/workflows"
        _CurrentWorkflowID="$(gh api -X GET "$_UrlPath" | jq '.workflows[] | select(.name == '\""$GITHUB_WORKFLOW"\"') | .id')"

        # delete workitems which are 'completed'. (other candidate values of status field are: 'queued' and 'in_progress')

        gh api -X GET "$_UrlPath/$_CurrentWorkflowID/runs" --paginate \
          | jq '.workflow_runs[] | select(.status == "completed") | .id' \
          | xargs -I{} gh api -X DELETE "/repos/$GITHUB_REPOSITORY/actions/runs"/{}

  run_command:
    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/run')
    runs-on: ubuntu-20.04
    steps:
    - name: Extract command to run
      uses: actions/github-script@v3
      id: command-extractor
      with:
        result-encoding: string
        script: |
          if (context.eventName !== "issue_comment") throw "Error: This action only works on issue_comment events.";

          // extract the command to run, allowed characters: a-z, A-Z, digits, hyphen, underscore
          const regex = /^\/run ([a-zA-Z\d\-\_]+)/;
          command = regex.exec(context.payload.comment.body);
          if (command == null) throw "Error: No command found in the trigger phrase.";

          return command[1];
    - name: Get github ref
      uses: actions/github-script@v3
      id: get-pr
      with:
        script: |
          const result = await github.pulls.get({
            pull_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          core.info(`${result}`)

          return result.head.ref
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        ref: ${{ steps.get-pr.outputs.result }}
        fetch-depth: 0
